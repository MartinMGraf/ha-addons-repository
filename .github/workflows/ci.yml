# This workflow defines a CI pipeline for building, packaging, and releasing .NET applications
# and container images for Home Assistant add-ons.
name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      csproj_path:
        description: 'Path to the csproj file in repository'
        required: true
        type: choice
        options:
          - 'ha-addon-ait-heatpump/HA.Addon.Ait.Heatpump/HA.Addon.Ait.Heatpump.csproj'
          - 'ha-addon-huawei-sun2000/HA.Addon.Huawei.Sun2000/HA.Addon.Huawei.Sun2000.csproj'
          - 'ha-addon-skoda-enyaq/HA.Addon.Skoda.Enyaq/HA.Addon.Skoda.Enyaq.csproj'
          - 'ha-addon-azure-backup/HA.Addon.Azure.Backup/HA.Addon.Azure.Backup.csproj'
      repository_name:
        description: 'Repository and Container registry name'
        required: true
        type: choice
        options: 
          - 'ha-addon-ait-heatpump'
          - 'ha-addon-huawei-sun2000'
          - 'ha-addon-skoda-enyaq'
          - 'ha-addon-azure-backup'

permissions:
  contents: write    
  packages: write

jobs:

  release-job:
    outputs:
     release_id: ${{ steps.create_release.outputs.id }}
     version: ${{ steps.version.outputs.version }} 
    runs-on: ubuntu-latest
    steps:
      - name: Generate version string
        id: version
        run: |
          echo "version=$(date +'%Y.%m').${{ github.run_number }}" >> $GITHUB_OUTPUT    
      - name: Create draft GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-v${{ steps.version.outputs.version }}
          name: release v${{ steps.version.outputs.version }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  container-job:
    runs-on: ubuntu-24.04-arm
    needs: release-job
    outputs:
      asset_url: ${{ steps.upload_asset.outputs.asset_url }}
    container:
      image: mcr.microsoft.com/dotnet/sdk:9.0-alpine-arm64v8
    steps:
     - name: Install build dependencies
       run: apk update && apk add --no-cache clang build-base zlib-dev curl zip jq
     - name: Clone repository
       run: git clone https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/MartinMGraf/${{github.event.inputs.repository_name}}.git
     - name: Publish .NET project
       run: dotnet publish ${{github.event.inputs.csproj_path}} --runtime linux-musl-arm64 --self-contained true -c Debug -o /release
     - name: Package release as ZIP
       run: |
         cd /release
         zip -r ../release.zip .        
     - name: Upload release.zip to GitHub release
       id: upload_asset
       run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @/release.zip \
            "https://uploads.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/${{needs.release-job.outputs.release_id}}/assets?name=release.zip")
          url=$(echo "$response" | jq -r '.url')
          echo "asset_url=$url" >> $GITHUB_OUTPUT

  docker-job:
    runs-on: ubuntu-latest
    needs: [container-job, release-job]
    steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        ssh-key:  ${{ secrets.GH_SSH }}      
    - name: Download and clean up release artifact
      run: |
        curl -L -H "Accept: application/octet-stream" \
         -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
         ${{ needs.container-job.outputs.asset_url }} \
         -o release.zip
        curl -L -X DELETE -H "Accept: application/vnd.github+json" \
         -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
         https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/${{needs.release-job.outputs.release_id}}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Unzip release.zip
      run: |
        mkdir ./${{github.event.inputs.repository_name}}/rootfs/app
        unzip release.zip -d ./${{github.event.inputs.repository_name}}/rootfs/app
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image for the addon with the release version as tag
      uses: docker/build-push-action@v5
      with:
        context: ./${{github.event.inputs.repository_name}}
        file: .github/workflows/Dockerfile
        platforms: linux/arm64
        push: true
        tags: ghcr.io/martinmgraf/${{github.event.inputs.repository_name}}:${{ needs.release-job.outputs.version }}
    - name: Update the addon config.yaml with the new release version
      run: |
        sed -i "s/^version: .*/version: ${{ needs.release-job.outputs.version }}/" ${{github.event.inputs.repository_name}}/config.yaml
    - name: Commit updated config.yaml and push changes to the main branch
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
        git add ${{github.event.inputs.repository_name}}/config.yaml
        git commit -m "Update version to ${{ needs.release-job.outputs.version }}"
        git push origin main